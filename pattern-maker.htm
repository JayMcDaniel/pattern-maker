<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]>      <html class="no-js"> <!--<![endif]-->
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title></title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

</head>

<style>
    body {
        padding: 10px;
    }

    table#pattern {
        width: fit-content;
        height: fit-content;
        border-spacing: 0px !important;
    }

    table#pattern tbody td {
        width: 15px;
        height: 15px;
        margin: 0px;
        padding: none;
        background-color: #fff;
        cursor: pointer;
        -webkit-print-color-adjust: exact;

    }

    table#pattern tbody th {
        width: 30px;
        height: 15px;
    }

    .add_row {
        float: left;
    }


    table#pattern a{
        user-select: none;
    }

    input {
        width: 80px;

    }
</style>

<body>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"
        integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ=="
        crossorigin="anonymous"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/p5@1.3.0/lib/p5.js"></script> -->


    <script>
        //global
        let pattern = {};
        let current_color = "";

        //patterns
        class Tree {

            constructor() {

                this.pattern = [ //dark and light green
                    [l, l, d, l, l],
                    [l, d, d, d, l],
                    [l, l, d, l, l],
                    [l, d, d, d, l],
                    [l, l, d, l, l],
                    [d, d, d, d, d],
                    [l, l, d, l, l],
                    [d, d, d, d, d],
                    [l, l, d, l, l]
                ];
            }

        }


        //blank pattern (a table elem)
        class Pattern {

            constructor(o = {}) {

                this.rows = o.rows || Number($("#rows_input").val());
                this.cols = o.cols || Number($("#columns_input").val());
                this.grid_color = o.grid_color || $("#grid_color_input").val();

            }

            draw() {

                let table_col_buttons = "<tr><th></th>" + new Array(this.cols).fill(
                        "<th><a href='#' class='add_column' title='Add column before'>+</a> <a href='#' class='remove_column' title='Remove column'>&minus;</a></th>)"
                    )
                    .join("") + "</tr>";
                let table_row =
                    "<tr><th><a href='#' class='add_row' title='Add row before'>+</a> <a href='#' class='remove_row' title='Remove row'>&minus;</a></th>" +
                    new Array(this.cols).fill("<td></td>").join("") + "</tr>";
                let table_body = new Array(this.rows).fill(table_row).join("");


                $("#pattern tbody").html(table_col_buttons + table_body);
                this.bind();
                this.colorGrid();

            }



            bind() {

                $("#pattern tbody td").unbind().mouseenter(function (event) {
                    event.preventDefault();
                        if (event.buttons === 1) { //mousedown
                            $(this).css("background-color", current_color);
                        }

                    })
                    .mousedown(function (event) {
                        event.preventDefault();
                        $(this).css("background-color", current_color);
                    });


                $(".add_column").unbind().click(function (ev) {
                    ev.preventDefault();
                    let add_col_index = $(this).parent().index() - 1;

                    $("#pattern tr").each(function (i, tr) {
                        if(i===0){
                            $("th:eq(" + (add_col_index +1) + ")", tr).before("<th><a href='#' class='add_column' title='Add column before'>+</a> <a href='#' class='remove_column' title='Remove column'>&minus;</a></th>");
                        }else{
                            $("td:eq(" + add_col_index + ")", tr).before("<td></td>");
                        }
                    });

                    pattern.bind();
                    pattern.colorGrid();
                });


                $(".add_row").unbind().click(function (ev) {
                    ev.preventDefault();
                    let add_row_index = $(this).parent().parent().index() - 1;
                    let column_length = $("#pattern tbody tr:last td").length;

                    let table_row = "<tr><th><a href='#' class='add_row' title='Add row before'>+</a> <a href='#' class='remove_row' title='Remove row'>&minus;</a></th>" +
                    new Array(column_length).fill("<td></td>").join("") + "</tr>";

                    $("#pattern tr:eq(" + add_row_index + ")").after(table_row);

                    pattern.bind();
                    pattern.colorGrid();

                });


                $(".remove_row").click(function(){
                    let remove_row_index = $(this).parent().parent().index();
                    $("#pattern tr:eq(" + remove_row_index + ")").remove();
                });


                $(".remove_column").click(function(){
                    let remove_column_index = $(this).parent().index() -1;

                    $("#pattern tr").each(function (i, tr) {
                    
                        $("td:eq(" + remove_column_index + ")", tr).remove();
                        $("th:eq(" + (remove_column_index + 1) + ")", tr).remove();

                    });
                   
                });

            }


            //color grid lines
            colorGrid() {
                $("#pattern td").css("border", "1px solid " + this.grid_color);

            }


        }



        //adding or removing columns function

        function changeColumns(new_col_cnt, current_col_cnt) {

            if (new_col_cnt > current_col_cnt) {

                let cols_to_add = new_col_cnt - current_col_cnt;

                $("#pattern tr").each(function (tr_index) {

                    for (let i = 0; i < cols_to_add; i++) {
                        if (tr_index === 0) {
                            $(this).append(
                                "<th><a href='#' class='add_column' title='Add column before'>+</a> <a href='#' class='remove_column' title='Remove column'>&minus;</a></th>"
                            );
                        } else {
                            $(this).append("<td></td>");
                        }

                    }
                });
            } else { //else removing columns
                $("#pattern tr").each(function () {
                    $("td:gt(" + (new_col_cnt - 1) + ")", $(this)).remove();
                    $("th:gt(" + (new_col_cnt) + ")", $(this)).remove()
                });
            }

            pattern.bind();
            pattern.colorGrid();
        }

        //adding or removing rows function

        function changeRows(new_row_cnt, current_row_cnt) {

            if (new_row_cnt > current_row_cnt) {

                let rows_to_add = new_row_cnt - current_row_cnt;
                let column_length = $("#pattern tbody tr:last td").length;

                for (let i = 0; i < rows_to_add; i++) {

                    let new_table_row =
                        "<tr><th><a href='#' class='add_row' title='Add row before'>+</a> <a href='#' class='remove_row' title='Remove row'>&minus;</a></th>" +
                        new Array(column_length).fill("<td></td>").join("") + "</tr>";
                    $("#pattern tbody").append(new_table_row);
                }
            } else { //else removing columns

                $("#pattern tr:gt(" + (new_row_cnt) + ")").remove();

            }

            pattern.bind();
            pattern.colorGrid();
        }








        //page init- draw blank canvas

        $(document).ready(function () {

            pattern = new Pattern();
            pattern.draw();

            //change rows/ columns inputs

            $("#columns_input").on("keyup change", function () {
                changeColumns(Number($(this).val()), $("#pattern tr:first th").length - 1);
            });

            $("#rows_input").on("keyup change", function () {
                changeRows(Number($(this).val()), $("#pattern tr").length - 1);
            });

            $("#color_input").change(function () {
                current_color = $(this).val();
            }).change();

            $("#grid_color_input").change(function () {
                pattern.grid_color = $(this).val();
                pattern.colorGrid();
            }).change();




        });
    </script>

    <h1>Pattern maker</h1>
    <p>Choose on a color then draw on boxes to change their colors.</p>

    <label for="columns_input">Columns: </label> <input type="number" id="columns_input" value="20" />
    <label for="rows_input">Rows: </label> <input type="number" id="rows_input" value="20" />
    <label for="color_input">Current color: </label> <input type="color" id="color_input" value="#B80000" />
    <label for="grid_color_input">Grid color: </label> <input type="color" id="grid_color_input" value="#A3A3A3" />

    <table id="pattern">
        <tbody>
        </tbody>
    </table>

</body>

</html>